Below is an updated runbook that explains the complete Terraform project with the new ALB module. This runbook details the folder structure, each module’s purpose, and the execution flow.

---

# Terraform Project Runbook

## 1. Overview

This Terraform project provisions an AWS infrastructure with the following key components:

- **Compute Resources:**  
  - **Private Servers:** EC2 instances deployed in a dynamically selected private subnet.  
  - **Application Servers:** EC2 instances for three distinct applications (two instances per application across two Availability Zones) that are fronted by an internal Application Load Balancer (ALB).  
  - **Public Instances:** EC2 instances deployed in a dynamically selected public subnet.

- **Application Load Balancer (ALB):**  
  - An internal ALB is created for each application.  
  - Each ALB has a target group, listener, and is attached to the respective application server instances.

- **Additional Services:**  
  - **EFS:** An Elastic File System with dynamic mount targets in private subnets.  
  - **RDS MySQL:** A production-only MySQL instance with daily backup retention and subnet group configuration.  
  - **Backup & Observability:** AWS Backup configuration (and optional VPC Flow Logs) for production.

- **Security Groups:**  
  - Security groups are defined in a dedicated module and stored in an auto-loaded variable file.  
  - Each resource can have multiple security groups attached, with each SG defined with its own ingress and egress rules.

- **Environment Separation:**  
  - The project supports multiple environments (dev, qa, uat, prod) through environment-specific variable files and Terraform Cloud variable sets.

---

## 2. Folder Structure

```plaintext
terraform-project/
├── main.tf                   # Root module that orchestrates all submodules
├── variables.tf              # Global variable definitions
├── outputs.tf                # Global outputs
├── terraform.tfvars          # Core variables (auto-loaded by Terraform)
├── security_groups.auto.tfvars  # Security Group definitions (auto-loaded)
├── environments/             # (Optional) Environment-specific variable files
│   ├── dev.tfvars
│   ├── qa.tfvars
│   ├── uat.tfvars
│   └── prod.tfvars
└── modules/
    ├── compute/             # Module for all EC2 instance resources (private, application, public)
    │   ├── main.tf          # Defines EC2 instances
    │   ├── variables.tf     # Module-specific variables for compute
    │   └── outputs.tf       # Outputs like instance IDs and mapping for application instances
    ├── alb/                 # Module for Application Load Balancers (internal) fronting application servers
    │   ├── main.tf          # Creates ALB, target groups, listeners, and attaches targets
    │   ├── variables.tf     # ALB module variables including subnets and application mapping
    │   └── outputs.tf       # Outputs ALB DNS names and ARNs
    ├── efs/                 # Module for EFS file system and mount targets
    │   ├── main.tf          # Provisions EFS and its mount targets
    │   ├── variables.tf     # EFS-specific variable definitions
    │   └── outputs.tf       # EFS outputs (file system ID)
    ├── rds/                 # Module for RDS MySQL instance (production only)
    │   ├── main.tf          # Creates RDS instance and its subnet group
    │   ├── variables.tf     # Variables for RDS configuration (including credentials)
    │   └── outputs.tf       # Outputs such as the RDS endpoint
    ├── backup/              # Module for AWS Backup and Observability (production only)
    │   ├── main.tf          # Provisions AWS Backup vault and backup plan
    │   ├── variables.tf     # Backup configuration variables
    │   └── outputs.tf       # Outputs backup plan ID
    └── sg/                  # Module for creating Security Groups dynamically
        ├── main.tf          # Creates security groups using dynamic blocks
        ├── variables.tf     # Definitions for each security group’s rules
        └── outputs.tf       # Outputs mapping of SG names to their IDs
```

---

## 3. Detailed Module Descriptions

### Root Module
- **main.tf:**  
  - Initializes the AWS provider and region.
  - Calls submodules in the following order:  
    1. **SG Module:** Creates all security groups.
    2. **Compute Module:** Provisions EC2 instances for private servers, application servers, and public instances.
    3. **ALB Module:** Creates an internal ALB for each application, sets up target groups, listeners, and attaches application instance IDs.
    4. **EFS Module:** Provisions an EFS file system and creates mount targets in private subnets.
    5. **RDS Module:** (For production only) Provisions a MySQL instance with necessary subnet groups and security.
    6. **Backup Module:** (For production only) Creates an AWS Backup vault and backup plan.
  
- **variables.tf & outputs.tf:**  
  - Global variable definitions (e.g., VPC ID, subnets, environment, compute resources).
  - Outputs from submodules are aggregated (e.g., instance IDs, ALB DNS names, EFS ID, RDS endpoint).

### Compute Module (modules/compute)
- **Purpose:**  
  - Provisions EC2 instances in three categories:  
    - **Private Servers:** All deployed in a single, dynamically selected private subnet.
    - **Application Servers:** Two instances per application (one per AZ) using specified private subnets.
    - **Public Instances:** All deployed in a single, dynamically selected public subnet.
  
- **Key Details:**  
  - Uses `for_each` for iterating over private and public server maps.
  - Uses `count` for application servers (to create two instances per application).
  - References multiple security groups per instance through the output mapping provided by the SG module.
  - Optionally attaches an IAM role to all instances.

### ALB Module (modules/alb)
- **Purpose:**  
  - Creates an internal Application Load Balancer (ALB) for each application.  
  - Configures a target group for each ALB with health check settings.  
  - Creates a listener that forwards traffic to the target group.  
  - Attaches each application’s EC2 instance IDs as targets.
  
- **Key Details:**  
  - ALB is set as internal and uses private subnets.
  - Security groups for ALB are provided (e.g., an “alb-sg” defined in the security groups file).
  - Application server instance IDs are passed from the compute module to attach as targets.
  - Outputs include ALB DNS names and ARNs.

### EFS Module (modules/efs)
- **Purpose:**  
  - Provisions an EFS file system with the desired performance mode and encryption.
  - Creates mount targets in each private subnet for high availability.
  
- **Key Details:**  
  - Tags include the environment name.
  - Mount targets are created in every private subnet provided.
  - Security groups for the EFS mount targets are defined separately.

### RDS Module (modules/rds)
- **Purpose:**  
  - Creates a MySQL RDS instance (production only) within the provided private subnets.
  - Configures a subnet group and associates security groups.
  - Enables daily backups with a specified retention period.
  
- **Key Details:**  
  - Conditionally deployed if enabled.
  - Uses secure variables for database credentials.
  - Outputs include the RDS endpoint for application connectivity.

### Backup Module (modules/backup)
- **Purpose:**  
  - Provisions an AWS Backup vault and backup plan for production resources.
  - Optionally integrates VPC Flow Logs for enhanced observability.
  
- **Key Details:**  
  - The backup plan is configured with a cron schedule and retention period.
  - Resources are tagged with common tags.

### Security Groups Module (modules/sg)
- **Purpose:**  
  - Dynamically creates all security groups defined in the auto-loaded security group variable file.
  - Each security group includes multiple ingress and egress rules.
  
- **Key Details:**  
  - Uses dynamic blocks to iterate over lists of rules.
  - Outputs a mapping of security group names to their AWS-generated IDs.
  - This mapping is referenced by the compute and ALB modules.

---

## 4. Execution Flow

1. **Initialization:**  
   - Commit the repository with all files (including `terraform.tfvars` and `security_groups.auto.tfvars`).
   - Terraform Cloud/Enterprise auto-loads `.auto.tfvars` files.
   - Run `terraform init` to initialize providers and modules.

2. **Planning:**  
   - Run `terraform plan` to preview the resource creation order:  
     - **Security Groups:** Created first to provide IDs for later modules.
     - **Compute Instances:** EC2 instances for private, application, and public categories.
     - **ALB:** Internal ALBs are created for each application with target groups and listeners.
     - **EFS:** Provisioning of the EFS file system and mount targets.
     - **RDS:** (If enabled) RDS MySQL instance is created.
     - **Backup:** Backup vault and plan are set up for production.
  
3. **Apply:**  
   - Run `terraform apply` to provision the resources.
   - Terraform provisions resources in the dependency order: Security Groups → Compute Instances → ALB (including target attachments) → EFS → RDS → Backup.

4. **Outputs:**  
   - After applying, outputs are available for review (instance IDs, application instance mapping, ALB DNS names, EFS ID, RDS endpoint, backup plan ID).

---

## 5. Usage & Maintenance

- **New Environments:**  
  - Create environment-specific variable files under the `environments/` folder or manage them via Terraform Cloud variable sets.
  
- **Security Group Updates:**  
  - To update security group rules, modify the `security_groups.auto.tfvars` file.  
  - The SG module will detect changes and update resources accordingly.
  
- **Module Updates:**  
  - Update module code as needed without impacting the overall project structure.
  - Follow version control best practices for module changes.
  
- **Debugging & Logs:**  
  - Use `terraform plan` to validate changes before applying.  
  - Review Terraform Cloud run logs and outputs for troubleshooting.

---

This runbook provides a detailed explanation of the updated Terraform project, including how each module functions, the folder structure, and the execution flow with the new internal ALB integration for application servers. It is designed to assist both new team members and maintainers in understanding and operating the infrastructure.
